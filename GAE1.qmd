---
title: "GAE1"
author: "T.H. Martin"
format: 
  html:
    self-contained: true
    toc: true
    code-tools: true

csl: ecology.csl

bibliography: 
- R_GAE1.bib
- references.bib
---

```{r}
#| label: SetUp
#| message: FALSE
#| echo: TRUE

# We can include comments inside code chunks by prefacing with "#"

# The opts_chunk$set() function from the knitr package sets the default behavior
# for all code chunks except the one it is in. Here I've told Rmarkdown to
# display the code chunks and to suppress information messages (but not
# warnings) in the code chunks that follow. We will usually set echo = FALSE to
# suppress printing the code in our output.

# You can change the behavior of individual code chunks by clicking on the gear
# icon at the top right of the chunk and choosing your preferred options.

knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE
  ) 

library(latex2exp)       
library(kableExtra)
library(knitr)
library(papaja)
library(tidyverse)

# a command from the papaja package that builds a bibliography file for packages
# loaded by the library() function.

r_refs(file = "R_GAE1.bib")
```

<!--# This chunk is a work-around to allow left-aligned table captions -->

```{=html}
<style type="text/css">
caption, .table-caption {
  text-align: left;
}
</style>
```
Relatively early in your textbook [@Quinn.Keough2002], you'll be introduced to an example data set that was generated by @Lovett.etal2000. They studied the chemistry of forested watersheds in the Catskill Mountains in New York State. We'll use these data for an introduction to using ***LaTeX*** to write symbols and equations and to become more familiar with R, RStudio, and github.

@Lovett.etal2000 chose 39 sites (observations) on first and second order streams and measured the concentrations of ten chemical variables averaged over three years, and four watershed variables (maximum elevation (m), sample elevation (m), length of stream (m), watershed area (ha)).:

1.  $NO_3^-$ (`NO3`),
2.  Total Organic $N$ (`TON`),
3.  Total $N$ (`TN`),
4.  $NH_4^{2+}$ (`NH4`),
5.  Dissolved Organic $C$ (`DOC`),
6.  $SO_4^{2-}$ (`SO4`),
7.  $Cl^-$ (`CL`),
8.  $Ca^{2+}$ (`CA`),
9.  $Mg^{2+}$ (`MG`),
10. $H^+$ (`H`).

## Data import

The data are provided as a comma-separated-value (.csv) "[flat-file database](https://en.wikipedia.org/wiki/Flat-file_database)" by @Quinn.Keough2002, "lovett.csv." I've imported this text file using the read_csv() function provided by the readr package [@R-readr] included in the tidyverse metapackage [@R-tidyverse]. This function will create a "[tibble](https://tibble.tidyverse.org/)" which is a special case of ***data.frame***, the standard approach for storing data in memory for most ***R*** operations. In ***R*** jargon, a data.frame is a particular class of ***list***, and lists are flexible ***R*** objects that may contain elements of different types like − numbers, strings, vectors and even other lists. A list can also contain a matrix or a function as its elements. In R, the term ***vectors*** may be more specific or more broad than what you may have been introduced to in a math class. Typically, when you see reference to *vector* in the context of ***R***, it's referring to ***atomic vectors***, that is, they are data structures that contain a single type of data:

-   logical -- TRUE or FALSE,
-   integer - numeric data that are whole integers,
-   double - double precision floating point format (i.e. numbers with decimals),
-   character - non-numeric data,
-   complex -- includes imaginary numbers, or
-   raw - information in byte form.

::: {.callout-tip style="color: gray" appearance="minimal"}
*In fingernails-on-the-chalkboard [grima](https://www.vocabulary.com/dictionary/es/grima), base-R also considers lists and atomic vectors to be specific types of more broadly defined vectors.*
:::

```{r }
#| label: dataImport

df1 <- read_csv("lovett.csv", show_col_types = FALSE)
```

After importing the data, you may wish to check to make sure the command did what you wanted, or to have a look at the variables included in the data.frame. Like most operations in ***R***, there are a number of ways to do this, but my preferred approach is to take advantage of the RStudio IDE. If you click on the Environment tab in the upper right hand window of RStudio, you will get a list of all of the objects currently being stored in active memory for ***R***. If you click on the small arrow icon (expand) to the left of df1 (our data.frame) you will see the details of the list of atomic vectors in the tibble. Note that STREAM is a vector of character data while all of the other vectors contain numeric data.

If you click on the spreadsheet icon to the far right of the data.frame name, RStudio will open a viewer that you can use to examine the data contained in the data.frame. This is purely a viewer and has no editing capabilities.

In the expanded listing of the contents for df1, you may notice the dollar symbol, "\$" -- this is actually an operator in ***R*** that allows you to address a specific part of an object. For example, in the code block below I ask ***R*** to print the elements of the vector, STREAM:

```{r}
df1$STREAM
```

I could address an individual value by using numeric indices, e.g. if I wanted to just get the length of the stream Santa Cruz, I could address the cell found at row 1 of column 4 in the tibble, I could use:

```{r}
df1[1,4]
```

You may use this approach to list the contents of an entire column or row just by not including the number for the other value, e.g. if I wanted to list all of the measures for Santa Cruz (row 1):

```{r}
df1[1,]
```

Or, if I wanted to just list the chemical parameters (columns 6 through 15) for Windham Ridge (row 5) while also including the stream name, I can use the c() function to create a list of columns:

```{r}
# The "c" operator in R combines values.

df1[5,c(1,6:15)]
```

## Methods & Results

You will have noticed that the format of the information we've produced up to this point isn't very attractive, readable, or easy to interpret. We need to produce publication-quality tables and figures to communicate with our readers. Typically we will summarize our data to condense it into a more easily understood form or display it in graphical form to help tell our story.

In the code-chunk below, I'm using the graphical abilities provided by the ggplot2 package [@R-ggplot2] provided by the tidyverse [@R-tidyverse] to produce a scatter plot of nitrate concentration (**NO3**) versus sample elevation (**SAMPELEV**).

```{r }
#| label: fig-Fig1
#| fig-cap: "Nitrate concentration versus elevation. Each observation was taken from a different stream."

ggplot(data = df1, aes(x = SAMPELEV, y = NO3)) +
  geom_point(shape = 16, 
             size = 3,
             color = "darkorchid4", # pretty close to WCU purple with 
             alpha = 0.5) +         # alpha (transparency) set to 0.5
  geom_smooth(span = 2) +           # for span, smaller is wigglier
  labs(x = "Elevation where sample was taken (m)",
       y = TeX("$NO_3^- \\; (\\mu mol/L)$")) +
  theme_classic()                   # Produces and "old school" graph
```

We see that nitrates appear to increase rapidly between 200 and 400 m then to plateau (@fig-Fig1). In the code chunk below, I have created a tibble that summarizes the nitrate data that I can use to produce a publication quality table using the kbl() function from the knitr [@R-knitr] and kableExtra packages [@R-kableExtra].

```{r }
#| label: tbl-tab1
#| tbl-cap: "Nitrate concentrations for samples from Lower elevations (≤ 400 m) and those from Higher elevations (> 400 m)."

df1$ELEVCLAS <- ifelse(df1$SAMPELEV <= 400, "Lower", "Higher")

tab1 <- df1 |>
  group_by(ELEVCLAS) |>
  summarize(MeanSAMPELEV = mean(SAMPELEV),
            SDSAMPELEV = sd(SAMPELEV),
            MeanNO3 = mean(NO3),
            SDNO3 = sd(NO3),
            n = n())

kbl(
  tab1,
  digits = c(0,0,0,1,1,2,2,0),
  align = c("lrrrrr"),
  col.names = c(" ", "mean", "sd", "mean", "sd", "n") 
  ) |>
  kable_classic(
    full_width = FALSE,
    bootstrap_options = "striped") |>
  column_spec(
    1:6,
    width = "15mm"
  ) |>
  column_spec(
    4,
    width = "40mm"
  ) |>
  add_header_above(
    c(
      " " = 1, 
      "$$Elevation (m)$$" = 2, 
      "$$NO_3^- \\; (\\mu mol/L)$$" = 2,
      " " = 1
      ),
    align = "right"
  ) 

```

The mean nitrate concentration for the 33 higher elevation samples was more than double that of the lower elevation samples (@tbl-tab1).

# Your assignment

1.  Edit this project to:

    a.  Use the example code to add a scatter plot of total nitrogen.

    b.  Add the mean and standard deviation for total nitrogen to the table.

    c.  Reference the new figure and table appropriately.

2.  Successfully push your edits back to our GitHub Classroom.

# References:
